openapi: "3.0.0"
info:
  version: 2.0.0  
  title: title
  description: description
  termsOfService: terms
  contact:
    name: odinBook
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT

tags:
- name: users
- name: post
- name: auth
paths:
  /users:
    post:
      tags:
      - users
      summary: "Create user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUser"
      responses:
        200:
         $ref: '#/components/responses/user'
        400:
          $ref: '#/components/responses/invalidData'
          
  /users/{id}:
    get:
      tags: 
      - users
      summary: "get user data"
      security: 
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        description: "user id"
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/user'
        404:
          description: user not founded

  /users/{id}/posts:
     get:
      tags: 
      - users
      - post
      summary: "get user posts"
      security: 
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        description: "user id"
        schema:
          type: string
      responses:
        200:
          $ref: "#/components/responses/posts"
        404:
          description: user not founded

  /users/{id}/friends:
     get:
      tags: 
      - users
      - friends
      summary: "get user friends"
      security: 
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        description: "user id"
        schema:
          type: string
      responses:
        200:
          $ref: "#/components/responses/simplifiedUsers"
        404:
          description: user not founded

  /users/{id}/friendRequests:
    get:
      tags: 
      - users
      - friends
      summary: "get user friendRequests"
      security: 
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        description: "user id"
        schema:
          type: string
      responses:
        200:
          $ref: "#/components/responses/simplifiedUsers"
        404:
          description: user not founded
    post:
      tags:
      - users
      - friends
      summary: "create a new friendRequest"
      security: 
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        description: "user id"
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                user:
                  type: string
                  description: receiver id
      responses:
        200:
          description: OK
        404:
          description: user not founded
      
  /login:
    post:
      tags: 
      - auth
      summary: "login user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUser'
      responses:
        200:
          $ref: "#/components/responses/login"
        400:
          description: "invalid data"
          
  /posts:
    post:
      tags: 
      - post
      summary: create a new post
      security: 
      - bearerAuth: []
      requestBody:
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/createPost'
      responses:
        200:
          $ref: '#/components/responses/post'
        400:
          $ref: '#/components/responses/invalidData'
        401:
          $ref: '#/components/responses/unauthorized'
          
    get:
      tags:
      - post 
      summary: get all posts
      security: 
      - bearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/posts'
        401:
          $ref: '#/components/responses/unauthorized'
          
  /posts/{id}:
    get:
      tags: 
      - post
      summary: "get post data"
      security: 
      - bearerAuth: []
      parameters: 
      - in: path
        name: id
        required: true
        description: post id
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/post'
        404:
          description: post not founded
        401:
          $ref: '#/components/responses/unauthorized'
          
  /posts/{postId}/comments:
    get:
      tags:
      - post
      - comment
      summary: "get all comments on post"
      security: 
      - bearerAuth: []
      parameters: 
      - in: path
        name: postId
        required: true
        description: post id
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/comments'
        401:
          $ref: '#/components/responses/unauthorized'
        404:
          description: post not founded
  /posts/{postId}/likes:
    post:
      tags:
      - post
      - like
      summary: add like to the post
      security: 
        - bearerAuth: []
      parameters: 
      - in: path
        name: postId
        required: true
        description: post id
        schema:
          type: string
      requestBody:
        content:
          application/json: 
            schema:
              properties:
                user:
                  type: string
                  description: user id
                
      responses:
        200:
          description: "like added"
  /comments:
    post:
      tags: 
      - comment
      summary: create a new comment
      security: 
      - bearerAuth: []
      requestBody:
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/createComment'
      responses:
        200:
          $ref: '#/components/responses/comment'
        400:
          $ref: '#/components/responses/invalidData'
        401:
          $ref: '#/components/responses/unauthorized'
          
components:
  
  securitySchemes:
     bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    # errors
    invalidData:
      description: invalid data
      content: 
        application/json:
          schema:
            $ref: '#/components/schemas/errors'
    unauthorized:
      description: user not authorized to do this action
    
    # users
    login:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                $ref: '#/components/schemas/user'
              token:
                type: string
    user:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    
    simplifiedUsers:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items: 
              $ref: '#/components/schemas/simplifiedUser'
    
    # posts
    posts:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/post'
    post:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/post'
            # posts
    comments:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/comment'
    comment:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/comment'
  
  schemas:
    # helpers
    postType:
      type: string
      enum:
      - "text"
    commentType:
      type: string
      enum:
      - "text"
    errors:
      type: object
      properties:
        errors:
          type: array
          items: 
            type: string
    # user schemas
    user:
      type: "object"
      properties:
        _id:
          type: "string"
        name:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        photoUrl:
          type: "string"
        birthday:
          type: "string"
          format: "date"
        friends: 
          type: "array"
          items:
            type: "string"
        friendsRequests:
          type: "array"
          items:
            type: "string"
        createdAt:
          type: "string"
          format: "date"
        updatedAt:
          type: "string"
          format: "date"
    createUser:
      type: "object"
      required: 
      - name
      - email
      - password
      properties:
        name:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        photoUrl:
          type: "string"
        birthday:
          type: "string"
          format: "date"
    loginUser:
      type: object
      properties:
        email:
            type: "string"
        password:
          type: "string"
    simplifiedUser:
      type: object
      properties:
        name:
          type: "string"
        email:
          type: "string"
        photoUrl:
          type: "string"
    # post schemas
    post:
      type: "object"
      properties:
        _id:
          type: "string"
        user:
          $ref: '#/components/schemas/simplifiedUser'
        type:
          $ref: '#/components/schemas/postType'
        text: 
          type: "string"
          description: "post text content"
        likes:
          type: "array"
          items:
            type: "string"
        createdAt:
          type: "string"
          format: "date"
        updatedAt:
          type: "string"
          format: "date"
    createPost:
      properties:
        user:
          type: string
          description: user id
        type:
          $ref: '#/components/schemas/postType'
        text:
          type: "string"
          description: "post text content"
    # comment schemas
    comment:
      type: "object"
      properties:
        _id:
          type: "string"
        user:
          $ref: '#/components/schemas/simplifiedUser'
        post:
          type: "string"
          description: "post id"
        type:
          $ref: '#/components/schemas/commentType'
        text: 
          type: "string"
          description: "post text content"
        likes:
          type: "array"
          items:
            type: "string"
        createdAt:
          type: "string"
          format: "date"
        updatedAt:
          type: "string"
          format: "date"
    createComment:
     properties:
        user:
          type: string
          description: user id
        post:
          type: string
          description: post id
        type:
          $ref: '#/components/schemas/commentType'
        text:
          type: "string"
          description: "comment text content"